using DeviceOperations.Services.Integration;
using Npgsql;

namespace DeviceOperations.Services.Integration;

public class DeviceMonitorIntegrationService : IDeviceMonitorIntegrationService
{
    private readonly ILogger<DeviceMonitorIntegrationService> _logger;
    private readonly string _connectionString;

    public DeviceMonitorIntegrationService(
        ILogger<DeviceMonitorIntegrationService> logger,
        IConfiguration configuration)
    {
        _logger = logger;
        _connectionString = configuration.GetConnectionString("PostgreSQL") ?? 
            "Host=localhost;Database=device_monitor;Username=postgres;Password=admin123";
    }

    public async Task<IEnumerable<DeviceHealthInfo>> GetDeviceHealthAsync()
    {
        try
        {
            using var connection = new NpgsqlConnection(_connectionString);
            await connection.OpenAsync();

            // Query the device_metrics table for latest device health information
            var query = @"
                SELECT device_id, device_vendor, device_name, status, status_message, 
                       memory_capacity, memory_usage, processing_usage, time_created, time_updated
                FROM device_metrics 
                ORDER BY time_updated DESC 
                LIMIT 50";

            using var command = new NpgsqlCommand(query, connection);
            using var reader = await command.ExecuteReaderAsync();

            var devices = new List<DeviceHealthInfo>();
                
            while (await reader.ReadAsync())
            {
                var device = new DeviceHealthInfo
                {
                    DeviceId = reader.GetString("device_id"),
                    DeviceVendor = reader.GetString("device_vendor"),
                    DeviceName = reader.GetString("device_name"),
                    Status = reader.GetString("status"),
                    StatusMessage = reader.IsDBNull("status_message") ? null : reader.GetString("status_message"),
                    MemoryCapacity = reader.IsDBNull("memory_capacity") ? null : reader.GetInt32("memory_capacity"),
                    MemoryUsage = reader.IsDBNull("memory_usage") ? null : (double)reader.GetFloat("memory_usage"),
                    ProcessingUsage = reader.IsDBNull("processing_usage") ? null : (double)reader.GetFloat("processing_usage"),
                    TimeCreated = reader.GetDateTime("time_created"),
                    TimeUpdated = reader.GetDateTime("time_updated")
                };
                
                device.IsAvailableForOperations = IsDeviceHealthy(device);
                devices.Add(device);
            }

            return devices;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to retrieve device health information from database");
            return Array.Empty<DeviceHealthInfo>();
        }
    }

    public async Task<DeviceHealthInfo?> GetDeviceHealthAsync(string deviceId)
    {
        try
        {
            using var connection = new NpgsqlConnection(_connectionString);
            await connection.OpenAsync();

            var query = @"
                SELECT device_id, device_vendor, device_name, status, status_message, 
                       memory_capacity, memory_usage, processing_usage, time_created, time_updated
                FROM device_metrics 
                WHERE device_id = @deviceId
                ORDER BY time_updated DESC 
                LIMIT 1";

            using var command = new NpgsqlCommand(query, connection);
            command.Parameters.AddWithValue("@deviceId", deviceId);
            
            using var reader = await command.ExecuteReaderAsync();

            if (await reader.ReadAsync())
            {
                var device = new DeviceHealthInfo
                {
                    DeviceId = reader.GetString("device_id"),
                    DeviceVendor = reader.GetString("device_vendor"),
                    DeviceName = reader.GetString("device_name"),
                    Status = reader.GetString("status"),
                    StatusMessage = reader.IsDBNull("status_message") ? null : reader.GetString("status_message"),
                    MemoryCapacity = reader.IsDBNull("memory_capacity") ? null : reader.GetInt32("memory_capacity"),
                    MemoryUsage = reader.IsDBNull("memory_usage") ? null : (double)reader.GetFloat("memory_usage"),
                    ProcessingUsage = reader.IsDBNull("processing_usage") ? null : (double)reader.GetFloat("processing_usage"),
                    TimeCreated = reader.GetDateTime("time_created"),
                    TimeUpdated = reader.GetDateTime("time_updated")
                };
                
                device.IsAvailableForOperations = IsDeviceHealthy(device);
                return device;
            }

            return null;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to retrieve device health for device {DeviceId}", deviceId);
            return null;
        }
    }

    public async Task<IEnumerable<DeviceHealthHistory>> GetDeviceHealthHistoryAsync(string deviceId, DateTime from, DateTime to)
    {
        try
        {
            using var connection = new NpgsqlConnection(_connectionString);
            await connection.OpenAsync();

            var query = @"
                SELECT device_id, memory_usage, processing_usage, time_updated
                FROM device_metrics 
                WHERE device_id = @deviceId
                  AND time_updated >= @startTime
                  AND time_updated <= @endTime
                ORDER BY time_updated DESC 
                LIMIT 100";

            using var command = new NpgsqlCommand(query, connection);
            command.Parameters.AddWithValue("@deviceId", deviceId);
            command.Parameters.AddWithValue("@startTime", from);
            command.Parameters.AddWithValue("@endTime", to);

            using var reader = await command.ExecuteReaderAsync();

            var history = new List<DeviceHealthHistory>();

            while (await reader.ReadAsync())
            {
                var record = new DeviceHealthHistory
                {
                    DeviceId = reader.GetString("device_id"),
                    MemoryUsage = reader.IsDBNull("memory_usage") ? 0.0 : (double)reader.GetFloat("memory_usage"),
                    ProcessingUsage = reader.IsDBNull("processing_usage") ? 0.0 : (double)reader.GetFloat("processing_usage"),
                    Timestamp = reader.GetDateTime("time_updated")
                };

                history.Add(record);
            }

            return history;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to retrieve device health history for device {DeviceId}", deviceId);
            return Array.Empty<DeviceHealthHistory>();
        }
    }

    public async Task<bool> IsDeviceAvailableForOperationsAsync(string deviceId)
    {
        try
        {
            var deviceHealth = await GetDeviceHealthAsync(deviceId);
            return deviceHealth?.IsAvailableForOperations ?? false;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to check device availability for {DeviceId}", deviceId);
            return false;
        }
    }

    public async Task<DeviceUsageStatistics?> GetDeviceUsageStatisticsAsync(string deviceId, TimeSpan period)
    {
        try
        {
            using var connection = new NpgsqlConnection(_connectionString);
            await connection.OpenAsync();

            var endTime = DateTime.UtcNow;
            var startTime = endTime - period;

            var query = @"
                SELECT 
                    AVG(processing_usage) as avg_processing,
                    MAX(processing_usage) as max_processing,
                    AVG(memory_usage) as avg_memory,
                    MAX(memory_usage) as max_memory,
                    COUNT(*) as sample_count
                FROM device_metrics 
                WHERE device_id = @deviceId 
                  AND time_updated >= @startTime 
                  AND time_updated <= @endTime";

            using var command = new NpgsqlCommand(query, connection);
            command.Parameters.AddWithValue("@deviceId", deviceId);
            command.Parameters.AddWithValue("@startTime", startTime);
            command.Parameters.AddWithValue("@endTime", endTime);

            using var reader = await command.ExecuteReaderAsync();

            if (await reader.ReadAsync())
            {
                return new DeviceUsageStatistics
                {
                    DeviceId = deviceId,
                    AverageProcessingUsage = reader.IsDBNull("avg_processing") ? 0.0 : Convert.ToDouble(reader.GetValue("avg_processing")),
                    MaxProcessingUsage = reader.IsDBNull("max_processing") ? 0.0 : Convert.ToDouble(reader.GetValue("max_processing")),
                    AverageMemoryUsage = reader.IsDBNull("avg_memory") ? 0.0 : Convert.ToDouble(reader.GetValue("avg_memory")),
                    MaxMemoryUsage = reader.IsDBNull("max_memory") ? 0.0 : Convert.ToDouble(reader.GetValue("max_memory")),
                    TotalSamples = reader.GetInt32("sample_count"),
                    Period = period,
                    StartTime = startTime,
                    EndTime = endTime
                };
            }

            return null;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to retrieve usage statistics for device {DeviceId}", deviceId);
            return null;
        }
    }

    private static bool IsDeviceHealthy(DeviceHealthInfo device)
    {
        // Check if device is online and recent
        if (device.Status != "online" || 
            DateTime.UtcNow - device.TimeUpdated > TimeSpan.FromMinutes(5))
        {
            return false;
        }

        // Check if processing usage is not maxed out (< 95%)
        if (device.ProcessingUsage.HasValue && device.ProcessingUsage.Value > 95.0)
        {
            return false;
        }

        // Check if memory usage is not critical (< 90%)
        if (device.MemoryUsage.HasValue && device.MemoryCapacity.HasValue && device.MemoryCapacity.Value > 0)
        {
            var memoryUsagePercent = (device.MemoryUsage.Value / device.MemoryCapacity.Value) * 100;
            if (memoryUsagePercent > 90.0)
            {
                return false;
            }
        }

        return true;
    }
}
